import http from 'k6/http';
import { sleep } from 'k6';

const BASE_URL = __ENV.BASE_URL || 'http://localhost:7080';

// Generated by gofakeit
const firstNames = [
    "Alice", "Bob", "Charlie", "David", "Eve", "Frank", "Grace", "Heidi",
    "Ivy", "Jack", "Karen", "Leo", "Mona", "Nina", "Oscar", "Paul", "Quinn",
    "Rita", "Sam", "Tina", "Uma", "Vik", "Walt", "Xena", "Yuri", "Zane",
    "Noah","Vanessa","Conner","Syble","Louvenia","Kiara","Jacey","Dahlia","Benjamin","Moses",
    "Matteo","Alexandre","Teresa","Zelma","Edgardo","Percival","Anais","Werner","Sunny","Josefina",
    "Moises","Eino","Jarred","Alfonzo","Kiel","Jada","Zack","Laverna","Randal","Kieran","Fausto",
    "Linwood","Bret","Frederick","Mohamed","Jaylon","Kailyn","Julianne","Katlyn","Kyla","Eve",
    "Braden","Katlynn","Ricky","Ransom","Joshua","Waino","Laila","Hanna","Lysanne","Peyton","Rickie",
    "Rosa","Jonathan","Rodrick","Waino","Luciano","Rosie","Karina","Merle","Garrison","Murphy","Rocio",
    "Hayden","Ezra","Furman","Wanda","Bailee","Johnnie","Major","Korey","Tyler","Kaelyn","Della","Jarrett",
    "Aliyah","Deangelo","Ena","Jose","Cristian", "Art","Kristin","Chaya","Cara","Naomi","Queenie","Marvin",
    "Savion","Miles","Noemi","Eliseo","John","Ettie","Violet","Ian","Barry","Erich","Ena","Vergie","Maud"
];
const lastNames  = [
    "Anderson", "Brown", "Clark", "Davis", "Evans", "Fisher", "Garcia", "Hill",
    "Irwin", "Johnson", "Keller", "Lopez", "Miller", "Nelson", "Owens", "Perez",
    "Quinn", "Roberts", "Smith", "Taylor", "Upton", "Vargas", "White", "Young", "Zimmer",
    "Wunsch","Hane","Zemlak","Haag","Kuphal","Carroll","Koelpin","Hudson","Corwin","Kerluke",
    "Lind","Hahn","Lindgren","Kunde","Hegmann","Langworth","Kuhic","McDermott","Grimes","Bogan",
    "Cormier","Yost","Wiza","Cummerata","VonRueden","Bahringer","Mann","Haag","Franecki","Satterfield",
    "Kihn","Weissnat","Walker","Dibbert","Vandervort","Sanford","Stroman","Powlowski","Pfannerstill",
    "Spinka","Monahan","Eichmann","Stoltenberg","Lind","Lebsack","Mayer","Macejkovic","Towne","Harris",
    "Walsh","Leuschke","Kemmer","Labadie","Carter","Fadel","Schulist","Bergstrom","Hartmann","Leuschke",
    "Larkin","Bins","Kozey","Monahan","Anderson","Fay","Hilpert","Tremblay","Mosciski","Hettinger",
    "Feeney","Towne","Von","Treutel","Donnelly","Ward","Kozey","Bednar","Hermann","Trantow","Kautzer",
    "Kub","Roberts","Gusikowski","Murazik","Harris","Koch","Nitzsche","Watsica","McGlynn","Pollich",
    "Connelly","Lebsack","Becker","Champlin","Hand","Farrell","Jacobson","Wilderman","Spencer","Ferry"
];

const emails = [
    "lennielabadie@monahan.com","laurineabbott@gulgowski.org","marionwalter@miller.name","hymanprohaska@schiller.com",
    "brookssawayn@kuhic.org","laurinerenner@thompson.com","jedidiahhills@mclaughlin.info","isabellazieme@goldner.io",
    "samsonbayer@parisian.biz","sheridanmoore@moen.name","jonwolf@bednar.biz","alizalindgren@berge.net",
    "magdalenadickinson@funk.org","keeleycassin@emard.org","obiemedhurst@abshire.org","rosinahowell@wunsch.name","hazlelehner@lynch.com",
    "gaetanolangosh@batz.info","carriemosciski@schiller.io","bessieebert@cummerata.info","toyhudson@dietrich.org",
    "janaemraz@mante.org","alenewisoky@erdman.info","franciscastrosin@senger.io","lorenzdubuque@roob.net",
    "addisonemard@wisozk.com","rubyeabbott@gusikowski.biz","feltonondricka@gulgowski.info","rosaleejacobi@hansen.name",
    "nedrohan@carter.com","wilfredojohnson@gorczany.net","cassandragreenfelder@quitzon.name","ezraosinski@von.info",
    "mariorodriguez@torphy.net","guswolff@wiegand.net","solonhilll@hammes.net","brownhammes@oreilly.net",
    "gabriellaskiles@stokes.net","corneliusfeeney@zieme.io","sebastiankling@mertz.io","reneetowne@prosacco.net",
    "conradgorczany@reichert.com","orionsauer@fritsch.info","karengutkowski@bruen.name","kimberlyemard@stracke.com",
    "merlecasper@roberts.com","alainaleuschke@beahan.biz","mireyaharber@ankunding.com","kyleighhuel@bashirian.info","sigridleuschke@rodriguez.info",
    "bernardjacobson@collier.org","anyaschuppe@wiza.org","alejandramann@schroeder.biz","rosaleeschneider@emmerich.io","marshallzulauf@hegmann.org",
    "estellakessler@feeney.net","camdenkshlerin@nicolas.com","barneyrau@franecki.io","angelinapacocha@kuvalis.org","kasandraemmerich@considine.net",
    "dallascartwright@cartwright.io","marjoryherman@kulas.net","elisabethtowne@frami.com","ivybreitenberg@oberbrunner.io","hymanwilkinson@lang.biz",
    "alexandrokuhlman@nolan.name","aleenschiller@jenkins.info","hiltonpfannerstill@labadie.net","brandyndietrich@gislason.name","bovon@wiza.com",
    "emiliapadberg@heidenreich.net","hassangerlach@hauck.io","elinoreryan@haag.org","norbertoberbrunner@thompson.biz","salliesawayn@zieme.net",
    "maevesimonis@haley.name","markuslittel@fisher.name","joedicki@hettinger.net","sheldonhagenes@hickle.io","kyliecassin@quitzon.io",
    "coykemmer@ziemann.org","dandrebuckridge@little.biz","valentinschulist@lebsack.org","bethbuckridge@corkery.name","abdielmorar@okuneva.net",
    "lanceeffertz@skiles.com","jaydamore@monahan.info","mariaflatley@adams.biz","lestersmith@mcdermott.info","shaynaemard@lesch.info",
    "rachellelind@schuppe.info","jeremyflatley@trantow.biz","claudineschroeder@durgan.io","uriahhauck@rau.name","jarengutmann@ledner.name",
    "kailynmiller@collins.info","tyshawnmurazik@aufderhar.biz","paulinehagenes@walsh.io","eugeniastokes@aufderhar.com","samsonswaniawski@hane.info"
]

const addresses = [
    "654 South Camptown, Reno, Oklahoma 84504","529 North Meadowhaven, Houston, Georgia 67365", "3626 Forkston, Fresno, New Jersey 60781",
    "24741 Wayshire, Apt 796, Irving, North Dakota 52195","9282 Passagefurt, Ofc 417, Honolulu, New Jersey 34166","75546 Pointland, St. Louis, Pennsylvania 61437",
    "816 New Ridgeland, Loft 383, San Diego, Vermont 75970","497 Millton, Chicago, Maine 55316","194 Lake Islandburgh, Apartment 437, New Orleans, Nevada 84919",
    "7084 Stationfurt, Louisville/Jefferson, New Mexico 43107","31429 Trafficwayside, Jersey, Montana 88913","59188 Mountainsfort, Oklahoma, Ohio 73271",
    "208 Summitborough, Corpus Christi, Pennsylvania 89162","606 Lightshaven, Rm 893, St. Paul, Nebraska 46722","3169 Walksport, Detroit, Maryland 64954",
    "878 Gardensmouth, Houston, Wyoming 69417","32773 Lake Islandside, Chicago, Iowa 24300","6859 East Cornerborough, Floor 138, New York City, Texas 31702",
    "6187 New Restville, Studio 118, Lexington-Fayette, Arkansas 52818","1899 Inletmouth, Office 515, Stockton, Nebraska 34725","9277 Dividefort, Austin, Nebraska 50675",
    "780 North Greenhaven, Boston, Kansas 28308","17355 Millsside, Las Vegas, North Dakota 83133","265 East Roadtown, Penthouse 321, Indianapolis, Hawaii 83191",
    "22672 Mountainsville, Fl 932, Laredo, Vermont 50436","118 South Spurbury, Ste 795, St. Paul, Connecticut 33230","2852 New Islefurt, Laredo, New Jersey 97825",
    "561 Streamchester, Lexington-Fayette, Montana 39408","431 Mountainsstad, New York City, Alabama 67718","9401 Port Streamtown, Norfolk, Kentucky 59821",
]

function randomPerson() {
  return {
    first_name: pickRandomItem(firstNames),
    last_name: pickRandomItem(lastNames),
    email: pickRandomItem(emails),
    address: pickRandomItem(addresses)
  };
}

// --- Scenarios ---
export const options = {
  scenarios: {
    // create_users: {
    //   executor: 'constant-arrival-rate',
    //   rate: 50, // requests per second
    //   timeUnit: '1s',
    //   duration: '30s',
    //   preAllocatedVUs: 10,
    //   exec: 'createPerson',
    // },
    create_users: {
      executor: 'shared-iterations',
      vus: 50,
      iterations: 50000,
      startTime: '0s',
      exec: 'createPerson',
    },
    update_users: {
      executor: 'constant-arrival-rate',
      rate: 5, // 5 req/s
      timeUnit: '1s',
      duration: '30s',
      preAllocatedVUs: 5,
      exec: 'updatePerson',
      startTime: '2s', // slight delay
    },
    delete_users: {
      executor: 'shared-iterations',
      vus: 10,
      iterations: 100,
      exec: 'deletePerson',
      startTime: '10s',
    },
    get_users: {
      executor: 'constant-arrival-rate',
      rate: 20,
      timeUnit: '1s',
      duration: '10m',
      preAllocatedVUs: 10,
      exec: 'getPerson',
      startTime: '1s',
    },

    get_userList: {
      executor: 'constant-arrival-rate',
      rate: 10,
      timeUnit: '1s',
      duration: '10m',
      preAllocatedVUs: 5,
      exec: 'getPersonList',
      startTime: '1s',
    },
  },
};

// --- Scenario Functions ---

export function createPerson() {
  const person = randomPerson();
  //console.log("Json person:: ", JSON.stringify(person))
  const res = http.post(`${BASE_URL}/person`, JSON.stringify(person), {
    headers: { 'Content-Type': 'application/json' },
  });
  sleep(0.5);
}

export function updatePerson() {
  const id = Math.floor(Math.random() * 1000);
  const person = randomPerson();
  http.put(`${BASE_URL}/person/${id}`, JSON.stringify(person), {
    headers: { 'Content-Type': 'application/json' },
  });
  sleep(0.5);
}

export function deletePerson() {
  const id = Math.floor(Math.random() * 1000);
  http.del(`${BASE_URL}/person/${id}`);
  sleep(0.5);
}

export function getPerson() {
  const id = Math.floor(Math.random() * 1000);
  http.get(`${BASE_URL}/person/${id}`);
  sleep(0.5);
}

export function getPersonList() {
  http.get(`${BASE_URL}/person/list`);
  sleep(0.5);
}

function pickRandomItem(items) {
  return items[Math.floor(Math.random() * items.length)]
}
